// Generated by dts-bundle-generator v8.0.1

import React from 'react';

export type ClassNames = {
	root: string;
	rootIsActive: string;
	rootIsDisabled: string;
	rootIsInvalid: string;
	label: string;
	tagList: string;
	tagListItem: string;
	tag: string;
	tagName: string;
	comboBox: string;
	input: string;
	listBox: string;
	option: string;
	optionIsActive: string;
	highlight: string;
};
export type Tag = {
	label: string;
	value: string | number | symbol | null;
};
export type TagMetaProps = {
	disabled: boolean;
};
export type TagInternalProps = {
	active: boolean;
	index: number;
	selected: boolean;
};
export type TagSuggestion = Tag & Partial<TagMetaProps>;
export type TagOption = Tag & TagMetaProps & TagInternalProps;
export type TagSelected = Tag;
export type OnAdd = (tag: Tag) => void;
export type OnDelete = (index: number) => void;
export type OnBlur = () => void;
export type OnFocus = () => void;
export type OnCollapse = () => void;
export type OnExpand = () => void;
export type OnInput = (value: string) => void;
export type OnShouldCollapse = (value: string) => boolean;
export type OnShouldExpand = (value: string) => boolean;
export type OnValidate = (value: string) => boolean;
export type SuggestionsTransform = (value: string, suggestions: TagSuggestion[]) => TagSuggestion[];
type PublicAPI = {
	input: {
		blur(): void;
		focus(): void;
		get value(): string;
		set value(value: string);
	};
	listBox: {
		collapse(): void;
		expand(): void;
		get activeOption(): TagSuggestion | null;
		get isExpanded(): boolean;
	};
	select(tag?: Tag): void;
};
export type HighlightRendererProps = {
	text: string;
	classNames: ClassNames;
};
export type HighlightRenderer = React.FunctionComponent<HighlightRendererProps>;
export type InputRendererProps = React.ComponentPropsWithoutRef<"input"> & {
	classNames: ClassNames;
	inputWidth: number;
};
export type InputRenderer = (props: InputRendererProps) => JSX.Element;
export type LabelRendererProps = {
	children: React.ReactNode;
	classNames: ClassNames;
	id: string;
};
export type LabelRenderer = (props: LabelRendererProps) => JSX.Element;
export type OptionRendererProps = React.ComponentPropsWithRef<"div"> & {
	children: React.ReactNode;
	classNames: ClassNames;
	option: TagOption;
};
export type OptionRenderer = (props: OptionRendererProps) => JSX.Element;
export type ListBoxRendererProps = React.ComponentPropsWithRef<"div"> & {
	children: React.ReactNode;
	classNames: ClassNames;
};
export type ListBoxRenderer = (props: ListBoxRendererProps) => JSX.Element;
export type RootRendererProps = React.ComponentPropsWithRef<"div"> & {
	children: React.ReactNode;
	classNames: ClassNames;
	isActive: boolean;
	isDisabled: boolean;
	isInvalid: boolean;
};
export type RootRenderer = (props: RootRendererProps) => JSX.Element;
export type TagRendererProps = React.ComponentPropsWithoutRef<"button"> & {
	classNames: ClassNames;
	tag: TagSelected;
};
export type TagRenderer = (props: TagRendererProps) => JSX.Element;
export type ReactTagsProps = {
	activateFirstOption?: boolean;
	allowBackspace?: boolean;
	allowNew?: boolean;
	allowResize?: boolean;
	ariaAddedText?: string;
	ariaDescribedBy?: string;
	ariaErrorMessage?: string;
	ariaDeletedText?: string;
	classNames?: ClassNames;
	collapseOnSelect?: boolean;
	deleteButtonText?: string;
	delimiterKeys?: string[];
	id?: string;
	isDisabled?: boolean;
	isInvalid?: boolean;
	labelText?: string;
	newOptionText?: string;
	noOptionsText?: string;
	onAdd: OnAdd;
	onBlur?: OnBlur;
	onCollapse?: OnCollapse;
	onDelete: OnDelete;
	onExpand?: OnExpand;
	onFocus?: OnFocus;
	onInput?: OnInput;
	onShouldCollapse?: OnShouldCollapse;
	onShouldExpand?: OnShouldExpand;
	onValidate?: OnValidate;
	placeholderText?: string;
	renderHighlight?: HighlightRenderer;
	renderInput?: InputRenderer;
	renderLabel?: LabelRenderer;
	renderListBox?: ListBoxRenderer;
	renderOption?: OptionRenderer;
	renderRoot?: RootRenderer;
	renderTag?: TagRenderer;
	selected: TagSelected[];
	suggestions: TagSuggestion[];
	suggestionsTransform?: SuggestionsTransform;
	tagListLabelText?: string;
};
declare const ReactTagsWithRef: React.ForwardRefExoticComponent<ReactTagsProps & React.RefAttributes<PublicAPI>>;

export {
	PublicAPI as ReactTagsAPI,
	ReactTagsWithRef as ReactTags,
};

export {};
